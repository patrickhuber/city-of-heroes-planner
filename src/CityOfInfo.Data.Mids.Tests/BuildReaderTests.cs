using CityOfInfo.Data.Mids.Saves;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Xunit;

namespace CityOfInfo.Data.Mids.Tests
{

    public class BuildReaderTests
    {

        [Fact]
        public void CanReadBuild()
        {
            var reader = new StringReader("|MxDz;1442;655;1310;HEX;|||");
            var saveReader = new SaveReader(reader);
            var save = saveReader.Read();
            Assert.NotNull(save);
            Assert.NotNull(save.CompressionData);

            using (var stream = new CompressionDataStream(save.CompressionData))
            {
                using (var binaryReader = new BinaryReader(stream))
                {
                    var buildReader = new BuildReader(binaryReader);
                    var build = buildReader.Read();
                    Assert.NotNull(build);
                    Assert.NotNull(build.Archetype);

                    Assert.NotNull(build.EnhancedPowers);
                    Assert.Equal(38, build.EnhancedPowers.Count);

                    Assert.NotNull(build.PowerSets);
                    Assert.Equal(8, build.PowerSets.Count);

                    Assert.Equal(1.01f, build.Version);
                    Assert.Equal(23, build.LastPower);
                    Assert.True(build.UseOldSubpowerFields);
                    Assert.False(build.UseQualifiedNames);
                }
            }                
        }
    }
}
