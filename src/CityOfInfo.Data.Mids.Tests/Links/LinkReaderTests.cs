using CityOfInfo.Data.Mids.Links;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Xunit;

namespace CityOfInfo.Data.Mids.Tests.Links
{
    public class LinkReaderTests
    {
        [Fact]
        public void CanRead()
        {
            var linkData = "http://www.cohplanner.com/mids/download.php?uc=1515&c=719&a=1438&f=HEX&dc=78DA6594594F135114C7EF6D074B59CA269445A4ECA5D06987C57D8982F820240412DF4C3396B18CA9D3320595471F7D73C1E012BF82897E0ED73705FD02AC1A356A14EBE9FC0FB549276D7E73CF3DF7FCCFB9E7DE99BC3956F1ECFCADD342FA46937A26139B31AC05D332929E99B869587143D0E31B35AD59C30ECC04C68CB8BEE42153F39E5F6C5AB712C6AC3A6EDA46EC2C855808E4A7C68C2B869531D4697DD6D417CC94153B635F4BD9A2622A954AAA13869E36AD44A53318371373B428518E513237ACDA7323EDCC9C996E3E9736E36A3EBAA338498286BDD44829F5D13FDD23F8C92A6285D0AB08DF43B0FA11F33158FB045C0F12A5B3C62DBEB985D014A17C67FE00F7FD04E77BD855644BE44BC5B1D5BE02F7BF66BE011BDE32DF811BA4E3661D7748226E3F581666AAD2C9C9269D12D629197039739D61A6CA8C805D517040031BA83F1EE8B83CF5885B7A01F997EE92B955119B948B9773F146E153A1318741DF08E8A778E5C84594B720CE73DAEC4AAC97952BD08D9C924EEC2F14BB0AFEAEAA0DF88737995BE075AAAF86EBAB798FFD69FCC05C050FAE313F82ED9FC017A45D076D51D7291C9B8B72ACE71CEBB3F4083759FC5CA19FBBDAC55DEDE2AEF6FE026F50364D9C4DD320AA691E620E8307469887C08387C12DAAB68577A265AFDA753E3D94432B77A2953B11DAC15CE82B789BB4DB58BBED376206FE3077997FC1F62C5360ED36697760ADBB238D9D189847872336C6DA22B84CBEDDACD37D07B9F4DC65DE63DE077B97990FC0155A1BE4B5C123C8A1EF28F318F338183AC1A7F124B848F5F57367FA9F92AD4E113B144C854DAA7E9C9AC8206AF2D29E45F9F44479CFB455C4D2D6B8074AFE96D32FD7EDABB9CB2F7337269B0D15CD468B2C5A9165A8C8325C649928B24C29F9EF81908EC55B2D72DD7132D92AA3593EA9328C3EECFCB749D98E9A5D1751E776A17F10FE9F0BFDF9A6B9A05D96B341E952C1BB5EF07EB9E0FD1F3BE0084E";
            var compressionData = GetCompressionData(linkData);

            Assert.Equal(1515, compressionData.UncompressedByteCount);
            Assert.Equal(719, compressionData.CompressedByteCount);
            Assert.Equal(1438, compressionData.EncodedByteCount);
            var expectedEncodedString = "78DA6594594F135114C7EF6D074B59CA269445A4ECA5D06987C57D8982F820240412DF4C3396B18CA9D3320595471F7D73C1E012BF82897E0ED73705FD02AC1A356A14EBE9FC0FB549276D7E73CF3DF7FCCFB9E7DE99BC3956F1ECFCADD342FA46937A26139B31AC05D332929E99B869587143D0E31B35AD59C30ECC04C68CB8BEE42153F39E5F6C5AB712C6AC3A6EDA46EC2C855808E4A7C68C2B869531D4697DD6D417CC94153B635F4BD9A2622A954AAA13869E36AD44A53318371373B428518E513237ACDA7323EDCC9C996E3E9736E36A3EBAA338498286BDD44829F5D13FDD23F8C92A6285D0AB08DF43B0FA11F33158FB045C0F12A5B3C62DBEB985D014A17C67FE00F7FD04E77BD855644BE44BC5B1D5BE02F7BF66BE011BDE32DF811BA4E3661D7748226E3F581666AAD2C9C9269D12D629197039739D61A6CA8C805D517040031BA83F1EE8B83CF5885B7A01F997EE92B955119B948B9773F146E153A1318741DF08E8A778E5C84594B720CE73DAEC4AAC97952BD08D9C924EEC2F14BB0AFEAEAA0DF88737995BE075AAAF86EBAB798FFD69FCC05C050FAE313F82ED9FC017A45D076D51D7291C9B8B72ACE71CEBB3F4083759FC5CA19FBBDAC55DEDE2AEF6FE026F50364D9C4DD320AA691E620E8307469887C08387C12DAAB68577A265AFDA753E3D94432B77A2953B11DAC15CE82B789BB4DB58BBED376206FE3077997FC1F62C5360ED36697760ADBB238D9D189847872336C6DA22B84CBEDDACD37D07B9F4DC65DE63DE077B97990FC0155A1BE4B5C123C8A1EF28F318F338183AC1A7F124B848F5F57367FA9F92AD4E113B144C854DAA7E9C9AC8206AF2D29E45F9F44479CFB455C4D2D6B8074AFE96D32FD7EDABB9CB2F7337269B0D15CD468B2C5A9165A8C8325C649928B24C29F9EF81908EC55B2D72DD7132D92AA3593EA9328C3EECFCB749D98E9A5D1751E776A17F10FE9F0BFDF9A6B9A05D96B341E952C1BB5EF07EB9E0FD1F3BE0084E";
            Assert.Equal(expectedEncodedString, compressionData.EncodedString);
            Assert.Equal("HEX", compressionData.Encoding);
        }

        [Fact]
        public void CanReadEmptyBuild()
        {
            var linkData = "http://www.cohplanner.com/mids/download.php?uc=609&c=250&a=500&f=HEX&dc=78DAF3AD70E159E7DE68CFC0C8EB9C93585C1CEF04244B528B587D13D333931980802B332F393FB72027B524951DC895832A880F4ACC4B4F4DD10B4A4CC94C2CC9CCCF83E854834907971614E4179520C9FB26E6651694E680390C8201F9F9397A9E796599C599499939992595226011D78A82D4A2CCDCD4BC12B03A5EB0A05B667A4649665E3A37849703E20ABA166426EB39E7E7A4000D06D9582901749D1A1047F23240C17F20020206734D7491FF7405322CE8F62B824418C122FFBDB5E0B2FFB530541A6088186288186388986088F8608804B0409D001461048B700A303030435DF2960B28CB882CFB1E43E41D86C8070C110042BB08B9";
            var compressionData = GetCompressionData(linkData);
            Assert.Equal(609, compressionData.UncompressedByteCount);
            Assert.Equal(250, compressionData.CompressedByteCount);
            Assert.Equal(500, compressionData.EncodedByteCount);
            var expectedEncodedString = "78DAF3AD70E159E7DE68CFC0C8EB9C93585C1CEF04244B528B587D13D333931980802B332F393FB72027B524951DC895832A880F4ACC4B4F4DD10B4A4CC94C2CC9CCCF83E854834907971614E4179520C9FB26E6651694E680390C8201F9F9397A9E796599C599499939992595226011D78A82D4A2CCDCD4BC12B03A5EB0A05B667A4649665E3A37849703E20ABA166426EB39E7E7A4000D06D9582901749D1A1047F23240C17F20020206734D7491FF7405322CE8F62B824418C122FFBDB5E0B2FFB530541A6088186288186388986088F8608804B0409D001461048B700A303030435DF2960B28CB882CFB1E43E41D86C8070C110042BB08B9";
            Assert.Equal(expectedEncodedString, compressionData.EncodedString);
            Assert.Equal("HEX", compressionData.Encoding);
        }

        private CompressionData GetCompressionData(string linkData)
        {
            var reader = new StringReader(linkData);
            var linkReader = new LinkReader(reader);
            var link = linkReader.Read();
            Assert.NotNull(link);
            Assert.NotNull(link.CompressionData);

            return link.CompressionData;
        }
    }
}
