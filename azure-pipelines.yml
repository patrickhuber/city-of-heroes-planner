# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
   BuildConfiguration: Release

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: BuildJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:
   
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:  
        command: 'build'
        projects: |
          **/*.sln

    # uncomment to display all output files
    #- powershell: dir -Recurse
      
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: 'test'
        projects: |
          **/*Tests*.csproj

    - task: DotNetCoreCLI@2
      displayName: Package
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/CityOfInfo.WebApp.Server.csproj'
        arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) --self-contained --runtime win-x86'

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: WebApp
      displayName: UploadArtifacts

- stage: Deploy
  displayName: Deploy
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - job: DeployJob
    pool:
      vmImage: 'ubuntu-latest'
    steps:    

    - download: current
      displayName: DownloadArtifacts
      artifact: WebApp

    # uncomment to display all output files
    #- powershell: dir -Recurse

    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        ConnectedServiceName: 'CityOfInfo'
        appType: 'webApp'
        WebAppName: 'city-of-heroes'
        packageForLinux: '$(Pipeline.Workspace)/**/*.zip'